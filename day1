Linux over Windows

1) Cost-Effectiveness
2) Performance and Efficiency
3) Security and Reliability

Core components of a Linux Machine

(a) Hardware Layer

 The physical components of the computer (CPU, RAM, disk, network interfaces, etc.).
 The OS interacts with hardware using device drivers.

(b) Kernel (Core of Linux OS)

The Linux Kernel is responsible for directly managing system resources, including:
Process Management – Schedules processes and handles multitasking.
Memory Management – Allocates and deallocates RAM efficiently.
Device Drivers – Acts as an interface between software and hardware.
File System Management – Manages how data is stored and retrieved.
Network Management – Handles communication between systems.

(c) Shell (Command Line Interface - CLI)

 A command interpreter that allows users to interact with the kernel.
 Examples: Bash, Zsh, Fish, Dash, Ksh.
 Converts user commands into system calls for the kernel.

(d) User Applications

End-user programs like web browsers, text editors, DevOps tools, etc.
Applications interact with the OS using system calls via the shell or GUI.

Linux Distributions

Linux distributions (distros) are different versions of Linux that package the Linux kernel with various software, system utilities, and package managers. Each distro is designed for different use cases, such as personal computing, server management, or security.
Here are some popular Linux distributions:
Ubuntu – One of the most beginner-friendly distros, widely used for personal and server use. It has great community support.
CentOS (discontinued, replaced by AlmaLinux/Rocky Linux) – Previously a popular choice for servers, based on Red Hat Enterprise Linux (RHEL).
Debian – A very stable and reliable distro, often used as a base for other distros like Ubuntu.
Fedora – A cutting-edge distro that introduces new features before they reach RHEL.
Arch Linux – A lightweight, rolling-release distro for advanced users who like customization.
Kali Linux – Designed for cybersecurity and penetration testing.
Alpine Linux – A lightweight, security-focused distro often used in containers.

A package manager is a tool that automates the process of installing, updating, configuring, and removing software in a Linux system. It ensures that software and its dependencies are managed efficiently.

How Does a Package Manager Work?

Repositories (Repos):
A package manager fetches software from official repositories (online storage of packages).
Example: Ubuntu gets packages from archive.ubuntu.com.

Installing Software:
When you install software, the package manager:Downloads the package from the repository.Resolves dependencies (installs additional required software).Installs and configures the software automatically.

Updating Software:
A single command updates all installed packages to the latest version.

Removing Software:
The package manager also removes software cleanly without leaving unnecessary files.

How Package Managers Fetch Software from Repositories?

A repository is a server that stores software packages. When a package manager installs software:
It checks the repository list (e.g., /etc/apt/sources.list in Ubuntu).
It downloads the package and its dependencies.
It installs and configures the software automatically.

Ubuntu-apt
sudo apt update         # Update package lists
sudo apt upgrade -y     # Upgrade installed packages
sudo apt install nginx  # Install a package
sudo apt remove nginx   # Remove a package
sudo apt autoremove     # Remove unused dependencies
sudo apt search nginx   # Search for a package
